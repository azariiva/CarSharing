type: edu
custom_name: Welcome, customer!
files:
- name: test/DatabaseUtil.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.sql.*;
    import java.util.HashMap;

    public class DatabaseUtil {

        private Connection connection = null;
        private static final String databaseFilePath = "./src/carsharing/db/carsharing";

        public Connection getConnection() {
            if (connection != null) {
                return connection;
            }
            try {
                connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't connect to the database.");
            }
            return connection;
        }

        public void closeConnection() {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ignored) {
                    System.out.println(ignored.getErrorCode());
                    throw new WrongAnswer("Can't close connection to the database.");
                }
                connection = null;
            }
        }

        public ResultSet executeQuery(String query) {
            try {
                return getConnection().createStatement().executeQuery(query);
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public boolean ifTableExist(String tableName) {
            try {
                tableName = tableName.toUpperCase();
                ResultSet resultSet = executeQuery("SHOW TABLES");
                while (resultSet.next()) {
                    if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                        return true;
                    }
                }
                return false;
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void ifColumnsExist(String tableName, String[][] columns) {
            try {
                ResultSet resultSet = getConnection()
                        .createStatement()
                        .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());

                HashMap<String, String> correctColumns = new HashMap<>();
                for (String[] column : columns) {
                    correctColumns.put(column[0], column[1]);
                }

                while (resultSet.next()) {
                    String columnName = resultSet.getString("FIELD");
                    if (correctColumns.containsKey(columnName)) {
                        if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                            throw new WrongAnswer("In the '" + tableName.toUpperCase() + "' table '" + columnName
                                    + "' column should be of " + correctColumns.get(columnName) + " type.");
                        }
                        correctColumns.remove(columnName);
                    }
                }
                if (!correctColumns.isEmpty()) {
                    throw new WrongAnswer("Can't find in '" + tableName.toUpperCase() + "' table the following columns: " + correctColumns.toString());
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void clearCompanyTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM COMPANY");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void clearCarTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CAR");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the CAR table.");
            }
        }

        public void clearCustomerTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CUSTOMER");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the CUSTOMER table.");
            }
        }

        public void checkCompany(String name) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' company in the 'COMPANY' table\n" +
                            "Make sure you don't clear the database after starting the program");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }

        public void checkCar(String companyName, String carName) {
            try {
                PreparedStatement companyStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                companyStatement.setString(1, companyName);

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);

                ResultSet resultSet = companyStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + companyName + "' company in the 'COMPANY' table.");
                }

                int id = resultSet.getInt("ID");

                resultSet = carStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }
                if (resultSet.getInt("COMPANY_ID") != id) {
                    throw new WrongAnswer("'COMPANY_ID' of the '" + carName + "' car is wrong. It should reference to the '" + companyName + "' company ID.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCustomer(String name, String carName) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM CUSTOMER WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' customer in the 'CUSTOMER' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }

                if (carName == null) {
                    if (resultSet.getString("RENTED_CAR_ID") != null) {
                        throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should be NULL");
                    }
                    return;
                }

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);
                ResultSet carResultSet = carStatement.executeQuery();

                if (!carResultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }

                int carId = carResultSet.getInt("ID");

                if (resultSet.getInt("RENTED_CAR_ID") != carId) {
                    throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should reference to the '" + carName + "' car ID.");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }


        public void checkCompanyColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCarColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CAR' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table is not FOREIGN KEY. It should refer to 'ID' column of the 'COMPANY' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("COMPANY(ID)")) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't refer to 'ID' column of the 'COMPANY' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCustomerColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CUSTOMER' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CUSTOMER' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'YES'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table has NOT NULL constraint, but it shouldn't");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table is not FOREIGN KEY. It should refer to 'ID' column of the 'CAR' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("CAR(ID)")) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table doesn't refer to 'ID' column of the 'CAR' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }
    }
  learner_created: false
- name: test/CarSharingTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.BeforeClass;

    import java.io.File;

    public class CarSharingTest extends StageTest<Void> {

        private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
        private static DatabaseUtil db = new DatabaseUtil();

        @BeforeClass
        public static void deleteDatabaseFile() {
            File file = new File(databaseFileName);

            if (!file.exists()) {
                return;
            }

            if (!file.delete()) {
                throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                    "Make sure you close all the connections with the database file!");
            }
        }

        @DynamicTest(order = 1)
        public CheckResult test2_ifDatabaseExist() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            program.execute("0");

            if (!program.isFinished()) {
                return CheckResult.wrong("After choosing 'Exit' item your program should stop.");
            }

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                    " and located in /carsharing/db/ folder.\n" +
                    "The file should be created right after starting the program!");
            }

            return correct();
        }

        @DynamicTest(order = 2)
        public CheckResult test1_testMenu() {
            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("Start menu should contain \"0. Exit\"");
            }

            output = program.execute("1");

            if (!output.contains("1. Company list")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
            }

            if (!output.contains("2. Create a company")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
            }

            if (!output.contains("0. Back")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
            }

            output = program.execute("0");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        public CheckResult test3_checkDatabaseConnection() {
            db.getConnection();
            return correct();
        }

        @DynamicTest(order = 4)
        public CheckResult test4_checkIfTableExists() {
            if (!db.ifTableExist("company")) {
                return wrong("Can't find table named 'company'");
            }
            if (!db.ifTableExist("car")) {
                return wrong("Can't find table named 'car'");
            }
            return correct();
        }

        @DynamicTest(order = 5)
        public CheckResult test5_checkTableColumns() {
            String[][] companyColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
            db.ifColumnsExist("company", companyColumns);
            db.checkCompanyColumnProperties();

            String[][] carColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"COMPANY_ID", "INT"}};
            db.ifColumnsExist("car", carColumns);
            db.checkCarColumnProperties();

            String[][] customerColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"RENTED_CAR_ID", "INT"}};
            db.ifColumnsExist("customer", customerColumns);
            db.checkCustomerColumnProperties();
            return correct();
        }

        @DynamicTest(order = 6)
        public CheckResult test6_testAddCompany() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");

            db.clearCustomerTable();
            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            String output = program.execute("1");

            if (!output.contains("The company list is empty")) {
                return wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
            }

            output = program.execute("2");

            if (!output.contains("Enter the company name")) {
                return wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                    "Your output should contain 'Enter the company name:'");
            }

            program.execute("Super company");
            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'");
            }

            db.checkCompany("Super company");

            program.execute("0\n2\nAnother company");
            program.execute("2\nOne more company");

            db.checkCompany("Another company");
            db.checkCompany("One more company");

            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected 'Super company' company.\n" +
                    "Your output should contain '1. Super company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Another company")) {
                return wrong("In the company list expected 'Another company' company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("3. One more company")) {
                return wrong("In the company list expected 'One more company' company.\n" +
                    "Your output should contain '2. One more company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            program.execute("2");

            return correct();
        }

        @DynamicTest(order = 7)
        public CheckResult test7_testAddCar() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            String output;

            db.clearCarTable();
            db.clearCompanyTable();
            db.clearCustomerTable();

            program.execute("1");
            program.execute("2");
            program.execute("Car To Go");
            program.execute("2");
            program.execute("Drive Now");

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected 'Car To Go' company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected 'Drive Now' company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Car list")) {
                return wrong("After choosing company you should print menu that contains '1. Car list' item");
            }

            if (!output.contains("2. Create a car")) {
                return wrong("After choosing company you should print menu that contains '2. Create a car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing company you should print menu that contains '0. Back' item");
            }

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            output = program.execute("2");

            if (!output.contains("Enter the car name:")) {
                return wrong("After choosing 'Create a car' item you should ask to enter a car name. " +
                    "Your output should contain 'Enter the car name:'");
            }

            program.execute("Hyundai Venue");
            db.checkCar("Car To Go", "Hyundai Venue");

            program.execute("2");
            program.execute("Maruti Suzuki Dzire");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            program.execute("0");

            program.execute("1");
            program.execute("2");

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            program.execute("2");
            program.execute("Lamborghini Urraco");

            output = program.execute("1");

            if (!output.contains("1. Lamborghini Urraco")) {
                return wrong("In the car list expected 'Lamborghini Urraco' car.\n" +
                    "Your output should contain '1. Lamborghini Urraco'");
            }

            if (output.contains("Hyundai Venue")) {
                return wrong("Your output contains 'Hyundai Venue'. This car is from another company");
            }

            if (output.contains("Maruti Suzuki Dzire")) {
                return wrong("Your output contains 'Maruti Suzuki Dzire'. This car is from another company");
            }

            db.checkCar("Drive Now", "Lamborghini Urraco");

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        @DynamicTest(order = 8)
        public CheckResult test8_testAddCustomer() {

            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            db.clearCustomerTable();

            if (!output.contains("2. Log in as a customer")) {
                return wrong("Start menu should contain \"2. Log in as a customer\"");
            }

            if (!output.contains("3. Create a customer")) {
                return wrong("Start menu should contain \"3. Create a customer\"");
            }

            output = program.execute("2");

            if (!output.contains("The customer list is empty!")) {
                return wrong("If no customers were created you should print 'The customer list is empty!'");
            }

            output = program.execute("3");

            if (!output.contains("Enter the customer name:")) {
                return wrong("After choosing '3. Create a customer' option you should ask to enter a customer name.\n" +
                    "Your output should contain 'Enter the customer name:'");
            }

            program.execute("First customer");
            db.checkCustomer("First customer", null);

            program.execute("3");
            output = program.execute("Second customer");
            db.checkCustomer("Second customer", null);

            if (!output.contains("2. Log in as a customer")) {
                return wrong("After creating a customer you should print main menu again.\n" +
                    "Your output should contain '2. Log in as a customer'");
            }

            output = program.execute("2");


            if (!output.contains("1. First customer")) {
                return wrong("In the customer list expected 'First customer' customer.\n" +
                    "Your output should contain '1. First customer'\n" +
                    "Customers should be sorted by 'ID' column");
            }

            if (!output.contains("2. Second customer")) {
                return wrong("In the customer list expected 'Second customer' customer.\n" +
                    "Your output should contain '2. Second customer'\n" +
                    "Customers should be sorted by 'ID' column");
            }

            output = program.execute("1");

            if (!output.contains("1. Rent a car")) {
                return wrong("After choosing customer you should print menu that contains '1. Rent a car' item");
            }

            if (!output.contains("2. Return a rented car")) {
                return wrong("After choosing customer you should print menu that contains '2. Return a rented car' item");
            }

            if (!output.contains("3. My rented car")) {
                return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
            }

            output = program.execute("3");

            if (!output.contains("You didn't rent a car!")) {
                return wrong("After choosing '3. My rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
            }

            output = program.execute("2");

            if (!output.contains("You didn't rent a car!")) {
                return wrong("After choosing '2. Return a rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
            }

            return correct();
        }

        @DynamicTest(order = 9)
        public CheckResult test9_testRentCar() {

            TestedProgram program = new TestedProgram();
            String output;
            program.start("-databaseFileName", "carsharing");

            db.checkCustomer("First customer", null);
            db.checkCustomer("Second customer", null);

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            db.checkCar("Drive Now", "Lamborghini Urraco");
            db.checkCar("Car To Go", "Hyundai Venue");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            program.execute("2");
            program.execute("1");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected 'Car To Go' company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected 'Drive Now' company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            output = program.execute("1");

            if (!output.contains("You rented 'Hyundai Venue'")) {
                return wrong("After renting 'Hyundai Venue' you shoul print 'You rented 'Hyundai Venue'");
            }

            db.checkCustomer("First customer", "Hyundai Venue");

            if (!output.contains("3. My rented car")) {
                return wrong("After renting a car you should print menu that contains '3. My rented car' option.");
            }

            output = program.execute("3");

            if (!output.contains("Hyundai Venue")) {
                return wrong("After choosing '3. My rented car' option expected car name is 'Hyundai Venue'");
            }

            if (!output.contains("Car To Go")) {
                return wrong("After choosing '3. My rented car' option expected company name is 'Car To Go'");
            }

            output = program.execute("1");

            if (!output.contains("You've already rented a car!")) {
                return wrong("If a customer has already rented a car and is trying to rent another one you should print 'You've already rented a car!'");
            }

            output = program.execute("2");

            if (!output.contains("You've returned a rented car!")) {
                return wrong("If a customer has already returned a rented car and is trying to return another one you should print 'You've returned a rented car!'");
            }

            db.checkCustomer("First customer", null);

            program.execute("0");
            program.execute("0");

            return correct();
        }

        @DynamicTest(order = 10)
        public CheckResult test10_testRentedCarInList() {

            TestedProgram program = new TestedProgram();
            String output;
            program.start("-databaseFileName", "carsharing");

            program.execute("2");
            program.execute("2");
            program.execute("1");
            program.execute("1");
            program.execute("1");
            program.execute("0");

            program.execute("2");
            program.execute("1");
            program.execute("1");

            output = program.execute("1");
            if (output.contains("Hyundai Venue")) {
                return wrong("You shouldn't print out a car if it is already rented!");
            }

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        private CheckResult wrong(String message) {
            db.closeConnection();
            return CheckResult.wrong(message);
        }

        private CheckResult correct() {
            db.closeConnection();
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/carsharing/persistance/repository/CompanyRepository.java
  visible: true
  text: |
    package carsharing.persistance.repository;

    import carsharing.businesslayer.Company;

    import java.util.List;

    public interface CompanyRepository {

        void createCompany(Company company);

        List<Company> readCompanies();
    }
  learner_created: true
- name: carsharing/db/carsharing
  visible: true
  learner_created: true
- name: src/carsharing/persistance/repository/JdbcCompanyRepository.java
  visible: true
  text: |
    package carsharing.persistance.repository;

    import carsharing.businesslayer.Company;
    import carsharing.persistance.JdbcConnectionContainer;

    import java.util.ArrayList;
    import java.util.List;

    public class JdbcCompanyRepository implements CompanyRepository {

        private static JdbcCompanyRepository jdbcCompanyRepository = null;

        public static JdbcCompanyRepository getInstance() {
            if (jdbcCompanyRepository == null) {
                jdbcCompanyRepository = new JdbcCompanyRepository();
            }
            return jdbcCompanyRepository;
        }

        private JdbcCompanyRepository() {
            final var sql = "CREATE TABLE IF NOT EXISTS COMPANY(" +
                    "ID INT AUTO_INCREMENT PRIMARY KEY, " +
                    "NAME VARCHAR(255) UNIQUE NOT NULL" +
                    ")";

            try (var stmt = JdbcConnectionContainer.getConnection().createStatement()) {
                stmt.executeUpdate(sql);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        @Override
        public void createCompany(Company company) {
            final var sql = "INSERT INTO COMPANY VALUES (DEFAULT, ?)";

            try (var stmt = JdbcConnectionContainer.getConnection().prepareStatement(sql)) {
                stmt.setString(1, company.getName());
                stmt.executeUpdate();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        @Override
        public List<Company> readCompanies() {
            final var sql = "SELECT * FROM COMPANY ORDER BY ID";

            try (var stmt = JdbcConnectionContainer.getConnection().createStatement()) {
                var rs = stmt.executeQuery(sql);
                var companies = new ArrayList<Company>();
                while (rs.next()) {
                    var company = new Company();
                    company.setId(rs.getInt("ID"));
                    company.setName(rs.getString("NAME"));
                    companies.add(company);
                }
                return companies;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: src/carsharing/controller/console/manager/ConsoleCompanyMenu.java
  visible: true
  text: |
    package carsharing.controller.console.manager;

    import carsharing.businesslayer.Car;
    import carsharing.controller.AppState;
    import carsharing.controller.console.ConsoleMenu;
    import carsharing.controller.console.SysoutScannerContainer;
    import carsharing.persistance.repository.JdbcCarRepository;

    import java.util.Map;
    import java.util.stream.IntStream;

    public class ConsoleCompanyMenu extends ConsoleMenu {

        private static final String[] MENU_OPTIONS_LIST = {
                "1. Car list",
                "2. Create a car",
                "0. Back"
        };

        protected ConsoleCompanyMenu(int companyId) {
            super(MENU_OPTIONS_LIST, Map.of(
                    0, ConsoleManagerMenu::new,
                    1, () -> handleCarListOption(companyId),
                    2, () -> handleCreateCarOption(companyId)
            ));
        }

        private static AppState handleCarListOption(int companyId) {
            var cars = JdbcCarRepository.getInstance().readCars(companyId);
            if (!cars.isEmpty()) {
                System.out.println("Car list:");
                IntStream.range(0, cars.size())
                                .forEach(idx -> System.out.printf("%d. %s\n", idx + 1, cars.get(idx).getName()));
            } else {
                System.out.println("The car list is empty!");
            }
            System.out.println();
            return new ConsoleCompanyMenu(companyId);
        }

        private static ConsoleCompanyMenu handleCreateCarOption(int companyId) {
            var car = new Car();
            car.setCompanyId(companyId);
            car.setName(askCarName());
            JdbcCarRepository.getInstance().createCar(car);
            return new ConsoleCompanyMenu(companyId);
        }

        private static String askCarName() {
            System.out.println("Enter the car name:");
            var carName = SysoutScannerContainer.getScanner().nextLine().trim();
            System.out.println("The car was added!");
            System.out.println();
            return carName;
        }
    }
  learner_created: true
- name: src/carsharing/persistance/JdbcConnectionContainer.java
  visible: true
  text: |
    package carsharing.persistance;

    import java.sql.Connection;
    import java.sql.DriverManager;

    public class JdbcConnectionContainer {

        private static final String JDBC_DRIVER = "org.h2.Driver";

        private static String dbUri = null;
        private static Connection connection = null;

        public static void setDbUri(String dbUri) {
            JdbcConnectionContainer.dbUri = dbUri;
        }

        public static Connection getConnection() {
            if (connection == null) {
                try {
                    Class.forName(JDBC_DRIVER);
                    connection = DriverManager.getConnection(dbUri);
                    connection.setAutoCommit(true);
                } catch (Exception ex) {
                    throw new RuntimeException(ex);
                }
            }
            return connection;
        }

        public static void closeConnection() {
            if (JdbcConnectionContainer.connection != null) {
                try {
                    JdbcConnectionContainer.connection.close();
                } catch (Exception ex) {
                    throw new RuntimeException(ex);
                }
                JdbcConnectionContainer.connection = null;
            }
        }
    }
  learner_created: true
- name: src/carsharing/businesslayer/Car.java
  visible: true
  text: |
    package carsharing.businesslayer;

    public class Car {

        private int id;
        private String name;
        private int companyId;

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getCompanyId() {
            return companyId;
        }

        public void setCompanyId(int companyId) {
            this.companyId = companyId;
        }
    }
  learner_created: true
- name: src/carsharing/controller/console/SysoutScannerContainer.java
  visible: true
  text: |
    package carsharing.controller.console;

    import java.util.Scanner;

    public class SysoutScannerContainer {

        private static Scanner scanner;

        public static Scanner getScanner() {
            if (scanner == null) {
                scanner = new Scanner(System.in);
            }
            return scanner;
        }
    }
  learner_created: true
- name: src/carsharing/controller/Menu.java
  visible: true
  text: |
    package carsharing.controller;

    public interface Menu extends AppState {

        void showMenu();

        AppState handleUserInput();

        @Override
        default AppState exec() {
            showMenu();
            return handleUserInput();
        }
    }
  learner_created: true
- name: src/carsharing/businesslayer/Customer.java
  visible: true
  text: |
    package carsharing.businesslayer;

    public class Customer {

        private int id;
        private String name;
        private
    }
  learner_created: true
- name: src/carsharing/businesslayer/Company.java
  visible: true
  text: |
    package carsharing.businesslayer;

    public class Company {

        private int id;
        private String name;

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }
    }
  learner_created: true
- name: src/carsharing/controller/AppState.java
  visible: true
  text: |
    package carsharing.controller;

    @FunctionalInterface
    public interface AppState {

        AppState exec();
    }
  learner_created: true
- name: src/carsharing/controller/console/ConsoleMainMenu.java
  visible: true
  text: |
    package carsharing.controller.console;

    import carsharing.controller.console.manager.ConsoleManagerMenu;

    import java.util.Map;

    public class ConsoleMainMenu extends ConsoleMenu {

        private static final String[] MENU_OPTIONS_LIST = {
                "1. Log in as a manager",
                "0. Exit"
        };

        public ConsoleMainMenu() {
            super(MENU_OPTIONS_LIST, Map.of(
                    0, () -> null,
                    1, ConsoleManagerMenu::new
            ));
        }
    }
  learner_created: true
- name: carsharing/db/carsharing.trace.db
  visible: true
  text: |
    2022-10-18 23:22:02 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "COMPANY" already exists; SQL statement:
    CREATE TABLE COMPANY(ID INT,NAME VARCHAR(255)) [42101-200]
    2022-10-18 23:24:41 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "COMPANY" already exists; SQL statement:
    CREATE TABLE COMPANY(ID INT,NAME VARCHAR(255)) [42101-200]
    2022-10-18 23:31:09 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "COMPANY" already exists; SQL statement:
    CREATE TABLE COMPANY(ID INT,NAME VARCHAR(255)) [42101-200]
    2022-10-18 23:34:06 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "COMPANY" already exists; SQL statement:
    CREATE TABLE COMPANY(ID INT,NAME VARCHAR(255)) [42101-200]
    2022-10-18 23:34:54 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "COMPANY" already exists; SQL statement:
    CREATE TABLE COMPANY(ID INT,NAME VARCHAR(255)) [42101-200]
    2022-10-18 23:36:36 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "COMPANY" already exists; SQL statement:
    CREATE TABLE COMPANY(ID INT,NAME VARCHAR(255)) [42101-200]
    2022-10-18 23:40:44 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "COMPANY" already exists; SQL statement:
    CREATE TABLE COMPANY(ID INT,NAME VARCHAR(255)) [42101-200]
  learner_created: true
- name: src/carsharing/controller/console/ConsoleController.java
  visible: true
  text: |
    package carsharing.controller.console;

    import carsharing.controller.AppState;

    public class ConsoleController implements Runnable {

        @Override
        public void run() {
            AppState state = new ConsoleMainMenu();
            while (state != null) {
                state = state.exec();
            }
        }
    }
  learner_created: true
- name: src/carsharing/persistance/repository/CarRepository.java
  visible: true
  text: |
    package carsharing.persistance.repository;

    import carsharing.businesslayer.Car;

    import java.util.List;

    public interface CarRepository {

        void createCar(Car car);

        List<Car> readCars(int companyId);
    }
  learner_created: true
- name: src/carsharing/controller/console/ConsoleMenu.java
  visible: true
  text: |
    package carsharing.controller.console;

    import carsharing.controller.AppState;
    import carsharing.controller.Menu;

    import java.util.Arrays;
    import java.util.Map;

    public abstract class ConsoleMenu implements Menu {

        private final String[] menuOptionsList;
        private final Map<Integer, AppState> menuOptionTransitions;

        protected ConsoleMenu(String[] menuOptionsList, Map<Integer, AppState> menuOptionTransitions) {
            this.menuOptionsList = menuOptionsList;
            this.menuOptionTransitions = menuOptionTransitions;
        }

        @Override
        public void showMenu() {
            Arrays.stream(menuOptionsList).forEach(System.out::println);
        }

        @Override
        public AppState handleUserInput() {
            var userOption = Integer.parseInt(SysoutScannerContainer.getScanner().nextLine().trim());
            System.out.println();
            return menuOptionTransitions.getOrDefault(userOption, () -> this);
        }
    }
  learner_created: true
- name: src/carsharing/controller/console/manager/ConsoleManagerMenu.java
  visible: true
  text: |
    package carsharing.controller.console.manager;

    import carsharing.businesslayer.Company;
    import carsharing.controller.console.ConsoleMainMenu;
    import carsharing.controller.console.ConsoleMenu;
    import carsharing.controller.console.SysoutScannerContainer;
    import carsharing.persistance.repository.JdbcCompanyRepository;

    import java.util.Map;

    public class ConsoleManagerMenu extends ConsoleMenu {

        private static final String[] MENU_OPTIONS_LIST = {
                "1. Company list",
                "2. Create a company",
                "0. Back"
        };

        public ConsoleManagerMenu() {
            super(MENU_OPTIONS_LIST, Map.of(
                    0, ConsoleMainMenu::new,
                    1, ConsoleCompanyListMenu::getConsoleCompanyListMenu,
                    2, ConsoleManagerMenu::handleCreateCompanyOption
            ));
        }

        private static ConsoleManagerMenu handleCreateCompanyOption() {
            var company = new Company();
            company.setName(askCompanyName());
            JdbcCompanyRepository.getInstance().createCompany(company);
            return new ConsoleManagerMenu();
        }

        private static String askCompanyName() {
            System.out.println("Enter the company name:");
            var companyName = SysoutScannerContainer.getScanner().nextLine().trim();
            System.out.println();
            return companyName;
        }
    }
  learner_created: true
- name: src/carsharing/persistance/repository/CustomerRepository.java
  visible: true
  learner_created: true
- name: src/carsharing/controller/console/ConsoleUtils.java
  visible: true
  learner_created: true
- name: src/carsharing/controller/console/customer/ConsoleCustomerMenu.java
  visible: true
  learner_created: true
- name: src/carsharing/controller/console/customer/ConsoleCustomerSelectionMenu.java
  visible: true
  learner_created: true
- name: src/carsharing/controller/console/manager/ConsoleCompanySelectionMenu.java
  visible: true
  text: |
    package carsharing.controller.console.manager;

    import carsharing.controller.AppState;
    import carsharing.controller.console.ConsoleMenu;
    import carsharing.persistance.repository.JdbcCompanyRepository;

    import java.util.AbstractMap;
    import java.util.Map;
    import java.util.stream.IntStream;
    import java.util.stream.Stream;

    public class ConsoleCompanyListMenu extends ConsoleMenu {

        public static AppState getConsoleCompanyListMenu() {
            final var companies = JdbcCompanyRepository.getInstance().readCompanies();

            if (companies.isEmpty()) {
                return () -> {
                    System.out.println("The company list is empty!");
                    System.out.println();
                    return new ConsoleManagerMenu();
                };
            }


            final var menuOptionsList = Stream.concat(
                    IntStream.range(0, companies.size())
                            .mapToObj(idx -> String.format("%d. %s", idx + 1, companies.get(idx).getName())),
                    Stream.of("0. Back")
            ).toArray(String[]::new);
            final Map<Integer, AppState> menuOptionTransitions = Map.ofEntries(Stream.concat(
                    Stream.of(new AbstractMap.SimpleImmutableEntry<Integer, AppState>(0, ConsoleManagerMenu::new)),
                    IntStream.range(0, companies.size())
                            .mapToObj(idx ->
                                    new AbstractMap.SimpleImmutableEntry<Integer, AppState>(
                                            idx + 1,
                                            () -> {
                                                var company = companies.get(idx);
                                                System.out.printf("'%s' company\n", company.getName());
                                                return new ConsoleCompanyMenu(companies.get(idx).getId());
                                            }
                                    )
                            )
            ).toArray(AbstractMap.SimpleImmutableEntry[]::new));
            return new ConsoleCompanyListMenu(menuOptionsList, menuOptionTransitions);
        }

        private ConsoleCompanyListMenu(String[] menuOptionsList, Map<Integer, AppState> menuOptionTransitions) {
            super(menuOptionsList, menuOptionTransitions);
        }

        @Override
        public void showMenu() {
            System.out.println("Choose the company:");
            super.showMenu();
        }
    }
  learner_created: true
- name: src/carsharing/db/carsharing.mv.db
  visible: true
  learner_created: true
- name: src/carsharing/Main.java
  visible: true
  text: |-
    package carsharing;

    public class Main {

        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: src/carsharing/controller/console/customer/ConsoleRentCarMenu.java
  visible: true
  learner_created: true
- name: src/carsharing/persistance/repository/JdbcCarRepository.java
  visible: true
  text: |
    package carsharing.persistance.repository;

    import carsharing.businesslayer.Car;
    import carsharing.persistance.JdbcConnectionContainer;

    import java.sql.SQLException;
    import java.util.ArrayList;
    import java.util.List;

    public class JdbcCarRepository implements CarRepository {

        private static JdbcCarRepository jdbcCarRepository = null;

        public static JdbcCarRepository getInstance() {
            if (jdbcCarRepository == null) {
                jdbcCarRepository = new JdbcCarRepository();
            }
            return jdbcCarRepository;
        }

        private JdbcCarRepository() {
            final var sql = "CREATE TABLE IF NOT EXISTS CAR(" +
                    "ID INT AUTO_INCREMENT PRIMARY KEY, " +
                    "NAME VARCHAR(255) UNIQUE NOT NULL, " +
                    "COMPANY_ID INT NOT NULL, " +
                    "FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY(ID)" +
                    ")";

            try (var stmt = JdbcConnectionContainer.getConnection().createStatement()) {
                stmt.executeUpdate(sql);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        @Override
        public void createCar(Car car) {
            final var sql = "INSERT INTO CAR VALUES (DEFAULT, ?, ?)";

            try (var stmt = JdbcConnectionContainer.getConnection().prepareStatement(sql)) {
                stmt.setString(1, car.getName());
                stmt.setInt(2, car.getCompanyId());
                stmt.executeUpdate();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        @Override
        public List<Car> readCars(int companyId) {
            final var sql = "SELECT * FROM CAR WHERE COMPANY_ID = ? ORDER BY ID";

            try (var stmt = JdbcConnectionContainer.getConnection().prepareStatement(sql)) {
                stmt.setInt(1, companyId);
                var rs = stmt.executeQuery();
                var cars = new ArrayList<Car>();
                while (rs.next()) {
                    var car = new Car();
                    car.setId(rs.getInt("ID"));
                    car.setName(rs.getString("NAME"));
                    car.setCompanyId(rs.getInt("COMPANY_ID"));
                    cars.add(car);
                }
                return cars;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: src/carsharing/persistance/repository/JdbcCustomerRepository.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11504#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Tue, 25 Oct 2022 20:40:40 UTC
record: -1
